name: Deploy Hugo

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      article-title: ${{ steps.get-title.outputs.title }}
      thumbnail-url: ${{ steps.get-title.outputs.thumbnail }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build
        run: hugo --minify

      - name: Get latest article title and thumbnail
        id: get-title
        run: |
          LATEST_POST=$(
            find content -name "*.md" -type f \
                 -exec stat --format='%Y %n' {} + 2>/dev/null | \
            sort -rn | \
            head -1 | \
            cut -d' ' -f2- || \
            echo ""
          )

          if [ ! -z "$LATEST_POST" ]; then
            TITLE=$(
              awk '/^---$/{flag++; next}
                flag==1 && /^title:/{
                  gsub(/^title: *["\047]?/, "");
                  gsub(/["\047]? *$/, "");
                  print; exit}' "$LATEST_POST" ||
              basename "$LATEST_POST" .md
            )
            echo "title=$TITLE" >> $GITHUB_OUTPUT

            # 記事と同じディレクトリ内の画像ファイルを探す
            POST_DIR=$(dirname "$LATEST_POST")
            THUMBNAIL=$(find "$POST_DIR" -maxdepth 1 -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) | head -1)

            if [ ! -z "$THUMBNAIL" ]; then
              # public ディレクトリ内の対応する画像パスを構築
              RELATIVE_PATH=$(echo "$THUMBNAIL" | sed 's|^content/||')
              PUBLIC_PATH="public/$RELATIVE_PATH"
              if [ -f "$PUBLIC_PATH" ]; then
                # GitHub Pages の URL に変換
                URL_PATH=$(echo "$RELATIVE_PATH" | sed 's| |%20|g')
                echo "thumbnail=https://hokumedai.github.io/$URL_PATH" >> $GITHUB_OUTPUT
              else
                echo "thumbnail=" >> $GITHUB_OUTPUT
              fi
            else
              echo "thumbnail=" >> $GITHUB_OUTPUT
            fi
          else
            echo "title=" >> $GITHUB_OUTPUT
            echo "thumbnail=" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          ARTICLE_TITLE: ${{ needs.build.outputs.article-title }}
          THUMBNAIL_URL: ${{ needs.build.outputs.thumbnail-url }}
        run: |
          if [ ! -z "$ARTICLE_TITLE" ]; then
            MESSAGE="新しい記事「$ARTICLE_TITLE」を公開しました！"
          else
            MESSAGE="ホームページを更新しました！"
          fi

          # Discord Webhook用のJSONペイロードを構築
          if [ ! -z "$THUMBNAIL_URL" ]; then
            # サムネイルがある場合はembedを使用
            PAYLOAD=$(cat <<EOF
          {
            "content": "$MESSAGE",
            "embeds": [{
              "title": "$ARTICLE_TITLE",
              "url": "${{ steps.deployment.outputs.page_url }}",
              "image": {
                "url": "$THUMBNAIL_URL"
              },
              "color": 5814783
            }]
          }
          EOF
            )
          else
            # サムネイルがない場合はシンプルなメッセージ
            PAYLOAD=$(cat <<EOF
          {
            "content": "$MESSAGE\nURLはこちらから↓\n${{ steps.deployment.outputs.page_url }}"
          }
          EOF
            )
          fi

          curl -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               $DISCORD_WEBHOOK
