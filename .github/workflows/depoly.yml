name: Deploy Hugo

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      article-title: ${{ steps.get-title.outputs.title }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build
        run: hugo --minify

      - name: Get latest article title and thumbnail
        id: get-title
        run: |
          # PRのコミットから追加されたmdファイルを探す
          LATEST_POST=$(
            git diff --name-only --diff-filter=A HEAD~1 HEAD | \
            grep -E '^content/.*\.md$' | \
            head -1 || \
            echo ""
          )

          # 追加されたファイルがない場合は更新されたファイルを探す
          if [ -z "$LATEST_POST" ]; then
            LATEST_POST=$(
              git diff --name-only --diff-filter=M HEAD~1 HEAD | \
              grep -E '^content/.*\.md$' | \
              head -1 || \
              echo ""
            )
          fi

          if [ ! -z "$LATEST_POST" ]; then
            TITLE=$(
              awk '/^---$/{flag++; next}
                flag==1 && /^title:/{
                  gsub(/^title: *["\047]?/, "");
                  gsub(/["\047]? *$/, "");
                  print; exit}' "$LATEST_POST" ||
              basename "$LATEST_POST" .md
            )
            echo "title=$TITLE" >> $GITHUB_OUTPUT
          else
            echo "title=" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          ARTICLE_TITLE: ${{ needs.build.outputs.article-title }}
        run: |
          if [ ! -z "$ARTICLE_TITLE" ]; then
            MESSAGE="新しい記事「$ARTICLE_TITLE」を公開しました！\nURLはこちらから↓\n${{ steps.deployment.outputs.page_url }}"
          else
            MESSAGE="ホームページを更新しました！\nURLはこちらから↓\n${{ steps.deployment.outputs.page_url }}"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "content": "$MESSAGE"
          }
          EOF
          )

          curl -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               $DISCORD_WEBHOOK
